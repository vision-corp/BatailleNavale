/*
 * TestBatailleNavale.java
 * Groupe 9 - Projet tutoré - Projet Barrios
 * copyright Tom Margalejo, Jean-Charles Luans, Florian Hyver, Tanguy Fenouillot, Dorian Gayraud
 */


/**
 * Fichier tests des méthodes utilisée et créée dans BatailleNavale : 
 * - afficherMer
 * - estValide 
 * - convertion 
 * - estOccupe
 * TODO : décrire jeux de tests utilisé  
 * @author Dorian Gayraud
 * @version 0.1
 */
public class TestBatailleNavale {
	
		
		/* Jeux de tests pour afficherMer */
		final private static int[][][] JEUX_MER =  {
				
			// Tableau vide 	
			{ 
				{ } 
			},
			
			// Tableau trop grand 
			new int[27][27],
				
		    { {0, 0, 0, 1, 0, 0},
		      {0, 0, 0, 0, 0, 1},
		      {0, 0, 0, 1, 0, 0},
		      {0, 0, 0, 0, 0, 1},
		      {1, 1, 1, 1, 0, 0},
		      {0, 0, 0, 0, 0, 1}
			},
		    
		    { {0, 0},
		      {0, 1}
		    },
		      // 1 A
		    { {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		       0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
		      // 2 B
		      {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		       0, 0, 1, 1, 1, 0, 0, 0, 0, 0 },
		      // 3 C
		      {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
		       0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		      // 4 D 
		      {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
		       0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		      // 5 E
		      {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
		       0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		      // 6 F
		      {0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
		       0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		      // 7 G
		      {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
		       0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		      // 8 H
			  {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
		       0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			  // 9 I
			  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
		       0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			  // 10 J
			  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 
		       1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			  // 11 K 
			  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
		       0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			  // 12 L 
			  {0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
		       0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			  // 13 M
			  {0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
		       0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
			  // 14 N
			  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
		       0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			  // 15 O
			  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
		       1, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
			  // 16 P
			  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
		       0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			  // 17 Q
			  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
		       0, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
			  // 18 R
			  {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
		       0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			  // 19 S 
			  {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
		       0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			  // 20 T
		      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
		       0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		      // 21 U
			  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
		       1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
			  // 22 V
		      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
		       0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
		      // 23 W
		      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 
		       1, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
		      // 24 X
			  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 
		       0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
			  // 25 
			  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
		       0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			  // 26
			  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		       0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		    }
		};
		
		final private static String[] JEUX_MER_CONVERTI = {
			
				"",
				"",
				  "    1   2   3   4   5   6   "
				 + "\n   ------------------------"
				 + "\nA   0 | 0 | 0 | 1 | 0 | 0 | "
				 + "\n   ------------------------"
				 + "\nB   0 | 0 | 0 | 0 | 0 | 1 | "
				 + "\n   ------------------------"
				 + "\nC   0 | 0 | 0 | 1 | 0 | 0 | "
				 + "\n   ------------------------"
				 + "\nD   0 | 0 | 0 | 0 | 0 | 1 | "
				 + "\n   ------------------------"
				 + "\nE   1 | 1 | 1 | 1 | 0 | 0 | "
				 + "\n   ------------------------"
				 + "\nF   0 | 0 | 0 | 0 | 0 | 1 | \n",
				 
				  "    1   2   "
				 + "\n   --------"
				 + "\nA   0 | 0 | "
				 + "\n   --------"
				 + "\nB   0 | 1 | \n",
				 
				"    1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  "
					+ "17  18  19  20  21  22  23  24  25  26  \n"
				 + "   -----------------------------------------------------------------"
					+ "---------------------------------------\n"
				 // 1 
				 + "A   0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |"
				    + " 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | \n"
				 + "   -----------------------------------------------------------------"
					+ "---------------------------------------\n"
				 // 2 
				 + "B   0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |"
				    + " 0 | 0 | 1 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | \n"
				 + "   -----------------------------------------------------------------"
					+ "---------------------------------------\n"
				 // 3 
				 + "C   0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |"
				    + " 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | \n"
				 + "   -----------------------------------------------------------------"
					+ "---------------------------------------\n"
				 // 4
				 + "D   0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |"
				    + " 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | \n"
				 + "   -----------------------------------------------------------------"
					+ "---------------------------------------\n"
				 // 5 
				 + "E   0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |"
				    + " 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | \n"
				 + "   -----------------------------------------------------------------"
					+ "---------------------------------------\n"
				 // 6
				 + "F   0 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |"
				    + " 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | \n"
			     + "   -----------------------------------------------------------------"
					+ "---------------------------------------\n"
				 // 8 
				 + "G   0 | 0 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 0 | 0 |"
				    + " 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | \n"
				 + "   -----------------------------------------------------------------"
					+ "---------------------------------------\n"
				 // 8 
				 + "H   1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 |"
				    + " 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | \n"
				 + "   -----------------------------------------------------------------"
					+ "---------------------------------------\n"
				 // 9
				 + "I   0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 |"
				    + " 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | \n"
				 + "   ----------------------------------------------------------------"
					+ "----------------------------------------\n"
				 // 10 
				 + "J   0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 |"
				    + " 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | \n"
				 + "   ----------------------------------------------------------------"
					+ "----------------------------------------\n"
				 // 11 
				 + "K   0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |"
				    + " 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | \n"
				 + "   ----------------------------------------------------------------"
					+ "----------------------------------------\n"
				 // 12
				 + "L   0 | 0 | 0 | 0 | 1 | 1 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |"
				    + " 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | \n"
				 + "   ----------------------------------------------------------------"
					+ "----------------------------------------\n"
				 // 13 
				 + "M   0 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |"
				    + " 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | \n"
				 + "   ----------------------------------------------------------------"
					+ "----------------------------------------\n"
				 // 14 
				 + "N   0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |"
				    + " 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | \n"
				 + "   ----------------------------------------------------------------"
					+ "----------------------------------------\n"
				 // 15 
				 + "O   0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |"
				    + " 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | \n"
				 + "   ----------------------------------------------------------------"
					+ "----------------------------------------\n"
				 // 16
				 + "P   0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |"
				    + " 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | \n"
				 + "   ----------------------------------------------------------------"
					+ "----------------------------------------\n"
				 // 17 
				 + "Q   0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 |"
				    + " 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | \n"
				 + "   ----------------------------------------------------------------"
					+ "----------------------------------------\n"
				 // 18 
				 + "R   0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 |"
				    + " 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | \n"
				 + "   ----------------------------------------------------------------"
					+ "----------------------------------------\n"
				 // 19 
				 + "S   0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 |"
				    + " 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | \n"
				 + "   ----------------------------------------------------------------"
					+ "----------------------------------------\n"
				 // 20 
				 + "T   0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |"
				    + " 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | \n"
				 + "   ----------------------------------------------------------------"
					+ "----------------------------------------\n"
				 // 21 
				 + "U   0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 |"
				    + " 1 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | \n"
				 + "   ----------------------------------------------------------------"
					+ "----------------------------------------\n"
				 // 22 
				 + "V   0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |"
				    + " 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | \n"
				 + "   -----------------------------------------------------------------"
					+ "---------------------------------------\n"
				 // 23 
				 + "W   0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 1 |"
				    + " 1 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | \n"
				 + "   -----------------------------------------------------------------"
					+ "---------------------------------------\n"
				 // 24
				 + "X   0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 1 |"
				    + " 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | \n"
			     + "   ----------------------------------------------------------------"
					+ "----------------------------------------\n"
				 // 25
				 + "Y   0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |"
				    + " 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | \n"
				 + "   -----------------------------------------------------------------"
					+ "---------------------------------------\n"
				 // 26 
				 + "Z   0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |"
				    + " 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | \n",		
		};
			
	    /**
		 * méthode de test pour afficherMer
		 */
	    public static void testAfficherMer() {
	    	
	    	int nbEchec;
	    	
	    	System.out.println("Test automatique du bon affichage de la mer : 1/2");
	        
	    	// Test automatique via comparaison de chaines de caractères
	    	nbEchec = 0;
	    	for (int indice = 0; indice < JEUX_MER.length; indice ++) {
	    		String mer = (BatailleNavale.afficherMer(JEUX_MER[indice])).toString();
				if (!(mer.equals(JEUX_MER_CONVERTI[indice]))) {
	    			nbEchec++;
	    			System.out.println("Echec sur JEUX_MER[" + indice + "]");
	    		}
	    	}
	    	System.out.println("Nombre test reussi : " + (5-nbEchec)
	    			           + "\nNombre echec : " + nbEchec);
	    	
	    	System.out.println("Test visuel du bon affichage de la mer : 2/2");
	    	// Test visuel du bon affichage de la mer 
	    	for (int indice = 2; indice < JEUX_MER.length; indice ++) {
	    		System.out.println(BatailleNavale.afficherMer(JEUX_MER[indice]));
	    		System.out.println(JEUX_MER_CONVERTI[indice]);
	    		
	    		System.out.println("\n\n");
	    	}
	    }
	    
	    /**
		 * Fonction main qui lance les méthode de tests
		 */
		public static void main(String[] args) {
			testAfficherMer();
	    }
}